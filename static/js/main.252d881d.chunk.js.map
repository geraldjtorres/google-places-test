{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","buildingVillaName","city","address","setAddress","getPlaceDescription","description","a","console","log","place_id","structured_formatting","main_text","toString","geocodeByPlaceId","results","address_components","forEach","item","types","long_name","place","error","className","htmlFor","onSelect","placeholder","type","name","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mSAmFeA,EA5EH,WAAO,IAAD,EACcC,mBAAS,CACrCC,kBAAmB,GACnBC,KAAM,KAHQ,mBACTC,EADS,KACAC,EADA,OAMgBJ,oBAAS,GANzB,mBAaVK,GAbU,UAaS,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DAC1BC,QAAQC,IAAI,sBAAuBH,GAC3BI,EAAaJ,EAAbI,SACFT,EAAoBK,EAAYK,sBAAsBC,UAAUC,WAEtET,EAAW,2BAAKD,GAAN,IAAeF,kBAAmBA,KAC5CO,QAAQC,IAAI,kBAAmBN,GANL,kBASFW,YAAiBJ,GATf,QASlBK,EATkB,QAWhB,GAAGC,mBAAmBC,SAAQ,SAAAC,GAGpC,OAFaA,EAAKC,MAAM,IAGtB,IAAK,WACHf,EAAW,2BAAKD,GAAN,IAAeD,KAAMgB,EAAKE,aAMxCZ,QAAQC,IAAI,OAAQS,MAGhBG,EAAQN,EAAQ,GAAGC,mBAAmB,GAAGI,UAC/CZ,QAAQC,IAAI,UAAWM,GACvBP,QAAQC,IAAI,QAASY,GA3BG,kDA6BxBb,QAAQc,MAAR,MA7BwB,0DAAH,uDAiCzB,OACE,yBAAKC,UAAU,OACb,iDAEA,yBAAKA,UAAU,QACb,2BAAOC,QAAQ,IAAf,gBACA,kBAAC,IAAD,aACEC,SAAUjB,QAAQC,IAClBiB,YAAY,+BAFd,YAGY,SAAApB,GAAW,OAAID,EAAoBC,OAG/C,2BAAOkB,QAAQ,IAAf,yBACA,2BAAOG,KAAK,SAKZ,2BAAOH,QAAQ,IAAf,QACA,2BACEG,KAAK,OACLC,KAAK,OACLC,MAAO1B,EAAQD,KACf4B,SAAU,SAAAC,GAAC,OA7DF,SAAAA,GACf3B,EAAW,2BAAKD,GAAN,kBAAgB4B,EAAEC,OAAOJ,KAAOG,EAAEC,OAAOH,SACnDrB,QAAQC,IAAI,IAAKsB,EAAEC,OAAOH,OA2DLC,CAASC,SChEdE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLd,QAAQc,MAAMA,EAAM4B,c","file":"static/js/main.252d881d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import { TranslatorProvider, useTranslate } from 'react-translate';\nimport './App.scss';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n} from 'react-google-places-autocomplete';\n\nconst App = () => {\n  const [address, setAddress] = useState({\n    buildingVillaName: '',\n    city: '',\n  });\n\n  const [toggler, toggleSwitch] = useState(false);\n\n  const onChange = e => {\n    setAddress({ ...address, [e.target.name]: e.target.value });\n    console.log('e', e.target.value);\n  };\n\n  const getPlaceDescription = async description => {\n    console.log('Place Description: ', description);\n    const { place_id } = description;\n    const buildingVillaName = description.structured_formatting.main_text.toString();\n\n    setAddress({ ...address, buildingVillaName: buildingVillaName });\n    console.log('current address', address);\n\n    try {\n      const results = await geocodeByPlaceId(place_id);\n\n      results[0].address_components.forEach(item => {\n        const type = item.types[0];\n\n        switch (type) {\n          case 'locality':\n            setAddress({ ...address, city: item.long_name });\n            break;\n          default:\n            break;\n        }\n\n        console.log('item', item);\n      });\n\n      const place = results[0].address_components[0].long_name;\n      console.log('Results', results);\n      console.log('place', place);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <h1>Residence Address</h1>\n\n      <div className='form'>\n        <label htmlFor=''>Your Address</label>\n        <GooglePlacesAutocomplete\n          onSelect={console.log}\n          placeholder='Start typing your address..'\n          onSelect={description => getPlaceDescription(description)}\n        />\n\n        <label htmlFor=''>Apartment / Villa No.</label>\n        <input type='text' />\n\n        {/* <label htmlFor=''>Building name / Villa</label>\n        <input type='text' value={address.buildingVillaName} /> */}\n\n        <label htmlFor=''>City</label>\n        <input\n          type='text'\n          name='city'\n          value={address.city}\n          onChange={e => onChange(e)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}