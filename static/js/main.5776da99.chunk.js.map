{"version":3,"sources":["components/forms/ResidenceAddressForm.js","components/forms/HomeAddressForm.js","components/forms/CompanyAddressForm.js","App.js","serviceWorker.js","index.js"],"names":["ResidenceAddressForm","useState","address","setAddress","showFields","toggleFields","onChange","e","target","name","value","getPlaceDescription","description","a","console","log","place_id","geocodeByPlaceId","results","addressComponents","buildingVillaName","streetNumber","city","streetName","country","structured_formatting","main_text","address_components","forEach","item","types","long_name","error","className","class","htmlFor","autocompletionRequest","componentRestrictions","placeholder","onSelect","onClick","type","to","HomeAddressForm","postCode","CompanyAddressForm","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5776da99.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import { TranslatorProvider, useTranslate } from 'react-translate';\nimport { Link } from 'react-router-dom';\nimport '../../App.scss';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n} from 'react-google-places-autocomplete';\n\nconst ResidenceAddressForm = () => {\n  const [address, setAddress] = useState({});\n\n  const [showFields, toggleFields] = useState(false);\n\n  const onChange = e => {\n    // const targetName = addressComponentse.target.name;\n\n    setAddress({\n      ...address,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const getPlaceDescription = async description => {\n    console.log('Place Description: ', description);\n    const { place_id } = description;\n\n    try {\n      const results = await geocodeByPlaceId(place_id);\n\n      let addressComponents = {\n        buildingVillaName: '',\n        streetNumber: '',\n        city: '',\n        streetName: '',\n        country: '',\n      };\n\n      // Get Building/villa name\n      const buildingVillaName = description.structured_formatting.main_text;\n      addressComponents.buildingVillaName = buildingVillaName;\n\n      // Loop over each address component item and pull out the values\n      results[0].address_components.forEach(item => {\n        const type = item.types[0];\n\n        switch (type) {\n          case 'street_number':\n            addressComponents.streetNumber = item.long_name;\n            break;\n          case 'locality':\n            addressComponents.city = item.long_name;\n            break;\n          case 'route':\n            addressComponents.streetName = item.long_name;\n            break;\n          case 'country':\n            addressComponents.country = item.long_name;\n            break;\n          default:\n            break;\n        }\n        console.log('item', item);\n      });\n      setAddress({ ...address, ...addressComponents });\n      const place = results[0].address_components[0].long_name;\n      console.log('address breakdown', address);\n\n      // Show all fields\n      toggleFields(!showFields);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className='container'>\n      <h1>Residence Address</h1>\n\n      <div className='form'>\n        {showFields === false ? (\n          <div class='autocomplete-container'>\n            <label htmlFor=''>Your Address</label>\n            <GooglePlacesAutocomplete\n              autocompletionRequest={{\n                componentRestrictions: {\n                  country: ['ae'],\n                },\n              }}\n              placeholder='Start typing your address..'\n              onSelect={description => getPlaceDescription(description)}\n            />\n\n            <p className='show-fields'>\n              Can't find your address?{' '}\n              <button onClick={() => toggleFields(!showFields)}>\n                Enter Manually\n              </button>\n            </p>\n          </div>\n        ) : (\n          <div className='manual-fields'>\n            <label htmlFor=''>Address Line 1</label>\n            <input\n              type='text'\n              name='buildingVillaName'\n              value={address.buildingVillaName}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Address Line 2</label>\n            <input\n              type='text'\n              name='streetName'\n              value={address.streetName}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Apartment / Villa No.</label>\n            <input\n              type='text'\n              name='streetNumber'\n              value={address.streetNumber}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>City</label>\n            <input\n              type='text'\n              name='city'\n              value={address.city}\n              onChange={e => onChange(e)}\n            />\n          </div>\n        )}\n      </div>\n\n      <div className='footer-btns'>\n        <Link to='/home-address-form' className='next-btn'>\n          Next\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ResidenceAddressForm;\n","import React, { useState } from 'react';\n// import { TranslatorProvider, useTranslate } from 'react-translate';\nimport { Link } from 'react-router-dom';\nimport '../../App.scss';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n} from 'react-google-places-autocomplete';\n\nconst HomeAddressForm = () => {\n  const [address, setAddress] = useState({});\n\n  const [showFields, toggleFields] = useState(false);\n\n  const onChange = e => {\n    // const targetName = addressComponentse.target.name;\n\n    setAddress({\n      ...address,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const getPlaceDescription = async description => {\n    console.log('Place Description: ', description);\n    const { place_id } = description;\n\n    try {\n      const results = await geocodeByPlaceId(place_id);\n\n      let addressComponents = {\n        buildingVillaName: '',\n        streetNumber: '',\n        city: '',\n        streetName: '',\n        country: '',\n        postCode: '',\n      };\n\n      // Get Building/villa name\n      const buildingVillaName = description.structured_formatting.main_text;\n      addressComponents.buildingVillaName = buildingVillaName;\n\n      // Loop over each address component item and pull out the values\n      results[0].address_components.forEach(item => {\n        const type = item.types[0];\n\n        switch (type) {\n          case 'street_number':\n            addressComponents.streetNumber = item.long_name;\n            break;\n          case 'locality':\n          case 'postal_town':\n            addressComponents.city = item.long_name;\n            break;\n          case 'route':\n            addressComponents.streetName = item.long_name;\n            break;\n          case 'country':\n            addressComponents.country = item.long_name;\n            break;\n          case 'postal_code':\n            addressComponents.postCode = item.long_name;\n            break;\n          default:\n            break;\n        }\n        console.log('item', item);\n      });\n      setAddress({ ...address, ...addressComponents });\n      const place = results[0].address_components[0].long_name;\n      console.log('address breakdown', address);\n\n      // Show all fields\n      toggleFields(!showFields);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className='container'>\n      <h1>Home Country Address</h1>\n\n      <div className='form'>\n        {showFields === false ? (\n          <div class='autocomplete-container'>\n            <label htmlFor=''>Your Address</label>\n            <GooglePlacesAutocomplete\n              autocompletionRequest={{}}\n              placeholder='Start typing your address..'\n              onSelect={description => getPlaceDescription(description)}\n            />\n\n            <p className='show-fields'>\n              Can't find your address?{' '}\n              <button onClick={() => toggleFields(!showFields)}>\n                Enter Manually\n              </button>\n            </p>\n          </div>\n        ) : (\n          <div className='manual-fields'>\n            <label htmlFor=''>Apartment / House No.</label>\n            <input\n              type='text'\n              name='streetNumber'\n              value={address.streetNumber}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Street Name</label>\n            <input\n              type='text'\n              name='streetName'\n              value={address.streetName}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>City</label>\n            <input\n              type='text'\n              name='city'\n              value={address.city}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Country</label>\n            <input\n              type='text'\n              name='country'\n              value={address.country}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Post Code / Zip Code</label>\n            <input\n              type='text'\n              name='postCode'\n              value={address.postCode}\n              onChange={e => onChange(e)}\n            />\n          </div>\n        )}\n      </div>\n\n      <div className='footer-btns'>\n        <Link to='/' className='back-btn'>\n          Back\n        </Link>\n\n        <Link to='/company-address-form' className='next-btn'>\n          Next\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeAddressForm;\n","import React, { useState } from 'react';\n// import { TranslatorProvider, useTranslate } from 'react-translate';\nimport { Link } from 'react-router-dom';\nimport '../../App.scss';\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n} from 'react-google-places-autocomplete';\n\nconst CompanyAddressForm = () => {\n  const [address, setAddress] = useState({});\n\n  const [showFields, toggleFields] = useState(false);\n\n  const onChange = e => {\n    // const targetName = addressComponentse.target.name;\n\n    setAddress({\n      ...address,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const getPlaceDescription = async description => {\n    console.log('Place Description: ', description);\n    const { place_id } = description;\n\n    try {\n      const results = await geocodeByPlaceId(place_id);\n\n      let addressComponents = {\n        buildingVillaName: '',\n        streetNumber: '',\n        city: '',\n        streetName: '',\n        country: '',\n        postCode: '',\n      };\n\n      // Get Building/villa name\n      const buildingVillaName = description.structured_formatting.main_text;\n      addressComponents.buildingVillaName = buildingVillaName;\n\n      // Loop over each address component item and pull out the values\n      results[0].address_components.forEach(item => {\n        const type = item.types[0];\n\n        switch (type) {\n          case 'street_number':\n            addressComponents.streetNumber = item.long_name;\n            break;\n          case 'locality':\n          case 'postal_town':\n            addressComponents.city = item.long_name;\n            break;\n          case 'route':\n            addressComponents.streetName = item.long_name;\n            break;\n          case 'country':\n            addressComponents.country = item.long_name;\n            break;\n          case 'postal_code':\n            addressComponents.postCode = item.long_name;\n            break;\n          default:\n            break;\n        }\n        console.log('item', item);\n      });\n      setAddress({ ...address, ...addressComponents });\n      const place = results[0].address_components[0].long_name;\n      console.log('address breakdown', address);\n\n      // Show all fields\n      toggleFields(!showFields);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className='container'>\n      <h1>Company Address</h1>\n\n      <div className='form'>\n        {showFields === false ? (\n          <div class='autocomplete-container'>\n            <label htmlFor=''>Your Address</label>\n            <GooglePlacesAutocomplete\n              autocompletionRequest={{}}\n              placeholder='Start typing your address..'\n              onSelect={description => getPlaceDescription(description)}\n            />\n\n            <p className='show-fields'>\n              Can't find your address?{' '}\n              <button onClick={() => toggleFields(!showFields)}>\n                Enter Manually\n              </button>\n            </p>\n          </div>\n        ) : (\n          <div className='manual-fields'>\n            <label htmlFor=''>Company name</label>\n            <input\n              type='text'\n              name='buildingVillaName'\n              value={address.buildingVillaName}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Street Name</label>\n            <input\n              type='text'\n              name='streetName'\n              value={address.streetName}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>City</label>\n            <input\n              type='text'\n              name='city'\n              value={address.city}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Country</label>\n            <input\n              type='text'\n              name='country'\n              value={address.country}\n              onChange={e => onChange(e)}\n            />\n\n            <label htmlFor=''>Post Code / Zip Code</label>\n            <input\n              type='text'\n              name='postCode'\n              value={address.postCode}\n              onChange={e => onChange(e)}\n            />\n          </div>\n        )}\n      </div>\n\n      <div className='footer-btns'>\n        <Link to='/home-address-form' className='back-btn'>\n          Back\n        </Link>\n\n        <Link to='/company-address-form' className='next-btn'>\n          Next\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default CompanyAddressForm;\n","import React, { Fragment } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  HashRouter,\n} from 'react-router-dom';\nimport ResidenceAddressForm from './components/forms/ResidenceAddressForm';\nimport HomeAddressForm from './components/forms/HomeAddressForm';\nimport CompanyAddressForm from './components/forms/CompanyAddressForm';\n\nconst App = () => {\n  return (\n    <HashRouter basename='/'>\n      <Fragment>\n        <Route exact path='/' component={ResidenceAddressForm} />\n        <Switch>\n          <Route exact path='/home-address-form' component={HomeAddressForm} />\n          <Route\n            exact\n            path='/company-address-form'\n            component={CompanyAddressForm}\n          />\n        </Switch>\n      </Fragment>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}